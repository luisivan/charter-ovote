import { FC } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { Else, If, Then, When } from "react-if";
import { FormSteps, UiContextProvider, useUiContext } from "../lib/context";

const Index: FC = () => {
  return (
    <UiContextProvider>
      <Head>
        <script src="./static/main.js"></script>
        <title>Charter sign app</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <main className={styles.main}>
          <img src="/aragon.png" className={styles.logo} />
          <div className={styles.header}>
            <img src="/fight-for-freedom.svg" className={styles.fff} />
          </div>

          <iframe
            className={styles.iframe}
            src="https://linked.md/v?u=https://linked.md/api/github/luisivan/charter-ovote/main/Charter.linked.md"
          >
          </iframe>

          <VSpace />
          <VSpace />

          <FormStepMux />
        </main>
      </div>
    </UiContextProvider>
  );
};

const FormStepMux: FC = () => {
  const {
    step,
    provider,
    signerAddress,
    charterAccepted,
    methods,
  } = useUiContext();

  switch (step) {
    case FormSteps.ACCEPT_CHARTER:
      return <StepAccept />;
    case FormSteps.CONNECTING_WALLET:
      return <StepConnectingWallet />;
    case FormSteps.GENERATE_BJJ_WALLETS:
      return <StepGenerateBabyJubJubWallets />;
    case FormSteps.GENERATING_BJJ_WALLETS:
      return <StepGeneratingBabyJubJubWallets />;
    case FormSteps.SET_CENSUS_ROOT:
      return <p>(not implemented)</p>;
    case FormSteps.SETTING_CENSUS_ROOT:
      return <p>(not implemented)</p>;
    case FormSteps.COMPUTE_VOTE_PROOF:
      return <StepComputeVote />;
    case FormSteps.COMPUTING_VOTE_PROOF:
      return <p>(not implemented)</p>;
    case FormSteps.SUBMITTING_VOTE:
      return <p>(not implemented)</p>;
    case FormSteps.RESULT:
      return <p>Success</p>;
    default:
      return <p>(not implemented)</p>;
  }

  return (
    <>
      <If condition={charterAccepted}>
        <Then>
          <If condition={signerAddress}>
            <Then>
              <p>
                Connected with: <code>{signerAddress}</code>
              </p>
            </Then>
            <Else>
              <button onClick={methods.nextStep}>Connect wallet</button>
            </Else>
          </If>

          <VSpace />

          <When condition={provider && signerAddress}>
            <div style={{ textAlign: "center" }}>
              {
                /* <button onClick={() => handleVote(true)}>VOTE YES</button>
              <HSpace />
              <button onClick={() => handleVote(false)}>VOTE NO</button>

              <When condition={hermezWalletAddress}>
                <p>Hermez address: {hermezWalletAddress}</p>
              </When>

              <VSpace />
                */
              }
            </div>
          </When>
        </Then>
      </If>
    </>
  );
};

const StepAccept: FC = () => {
  const {
    charterAccepted,
    methods,
  } = useUiContext();

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={charterAccepted}
          onChange={() => methods.setCharterAccepted(!charterAccepted)}
        />
        &nbsp; I have read and accept the terms outlined above by joining the
        Aragon DAO
      </label>

      <VSpace />

      <button onClick={methods.nextStep}>Continue</button>
    </>
  );
};

const StepConnectingWallet: FC = () => {
  return <p>Connecting to Metamask...</p>;
};

const StepGenerateBabyJubJubWallets: FC = () => {
  const { methods } = useUiContext();

  return (
    <>
      <p>
        Next, you are going to generate the Baby Jub Jub wallets and compute the
        census
      </p>

      <VSpace />

      <button onClick={methods.nextStep}>Continue</button>
    </>
  );
};

const StepGeneratingBabyJubJubWallets: FC = () => {
  return (
    <>
      <p>
        Generating the wallets and creating the census, please wait...
      </p>
    </>
  );
};

const StepComputeVote: FC = () => {
  const { methods } = useUiContext();

  return (
    <>
      <p>
        The census is created. You can finally compute your vote and submit it
        on-chain.
      </p>

      <VSpace />

      <button onClick={methods.nextStep}>Continue</button>
    </>
  );
};

const VSpace = () => <div style={{ height: 30 }} />;
const HSpace = () => <span style={{ marginLeft: 20 }} />;

export default Index;
